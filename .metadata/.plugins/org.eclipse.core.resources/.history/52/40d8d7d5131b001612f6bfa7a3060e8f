package hw3;

public class Q3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

class Employee {

	private final String firstName;
	private final String lastName;
	private final String socialSecurityNumber;

	public Employee(String firstName, String lastName, String socialSecurityNumber) {
		this.firstName = firstName;
		this.lastName = lastName;
		this.socialSecurityNumber = socialSecurityNumber;
	}

	public String getFirstName() {
		return firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public String getSocialSecurityNumber() {
		return socialSecurityNumber;
	}

	public String toString() {

		return String.format("%s: %s %s%n%s: %s", "employee", getFirstName(), getLastName(), "social security number",
				getSocialSecurityNumber());
	}

}

class CommissionEmployee extends Employee {

	private double grossSales; // gross weekly sales
	private double commissionRate; // commission percentage

	// five-argument constructor
	public CommissionEmployee(String firstName, String lastName, String socialSecurityNumber, double grossSales, double commissionRate) {

		super(firstName, lastName, socialSecurityNumber);
		// if grossSales is invalid throw exception
		if (grossSales < 0.0) {
			throw new IllegalArgumentException("Gross sales must be >= 0.0");
		}

		// if commissionRate is invalid throw exception
		if (commissionRate <= 0.0 || commissionRate >= 1.0) {
			throw new IllegalArgumentException("Commission rate must be > 0.0 and < 1.0");
		}

		this.grossSales = grossSales;
		this.commissionRate = commissionRate;
	} // end constructor

	// set gross sales amount
	public void setGrossSales(double grossSales) {
		if (grossSales < 0.0) {
			throw new IllegalArgumentException("Gross sales must be >= 0.0");
		}
		this.grossSales = grossSales;
	}

	// return gross sales amount
	public double getGrossSales() {
		return grossSales;
	}

	// set commission rate
	public void setCommissionRate(double commissionRate) {
		if (commissionRate <= 0.0 || commissionRate >= 1.0) {
			throw new IllegalArgumentException("Commission rate must be > 0.0 and < 1.0");
		}
		this.commissionRate = commissionRate;
	}

	// return commission rate
	public double getCommissionRate() {
		return commissionRate;
	}

	// calculate earnings
	public double earnings() {
		return getCommissionRate() * getGrossSales();
	}

	// return String representation of CommissionEmployee object
	@Override
	public String toString() {
		return String.format("%s %s%n%s: %.2f%n%s: %.2f", "commission", super.toString(), "gross sales", getGrossSales(), "commission rate", getCommissionRate());
	}
} // end class CommissionEmployee

class HourlyEmployee extends Employee {
	private double hours;
	private double wage;

	public HourlyEmployee(String firstName, String lastName, String socialSecurityNumber, double hours, double wage) {

		super(firstName, lastName, socialSecurityNumber);

		if (hours < 0 || hours > 168) {
			throw new IllegalArgumentException("Hours must be >= 0.0 and <= 168.0");
		}
		if(wage < 0){
			throw new IllegalArgumentException("Wage must be >= 0.0");
		}
		
		this.hours = hours;
		this.wage = wage;
	}
	
	public void setHours(double hours) {
		
		if (hours < 0 || hours > 168) {
			throw new IllegalArgumentException("Hours must be >= 0.0 and <= 168.0");
		}
		this.hours = hours;
	}
	
	public double getHours() {
		return hours;
	}
	
	public void setWage(double wage) {
		
		if(wage < 0){
			throw new IllegalArgumentException("Wage must be >= 0.0");
		}		
		this.wage = wage;
	}
	
	public double getWage() {
		return wage;
	}
	
	public double earnings(){
		if(hours > 40){
			return (40*wage)+(hours-40)*(wage*1.5);
		}
		else {
			return hours * wage;
		}
	}
	
	@Override
	public String toString() {
		return String.format("%s %s%n%s: %.2f%n%s: %.2f", "hourly", super.toString(), "hours", getHours(), "wage", getWage());
	}

}